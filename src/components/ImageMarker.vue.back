<template>
    <div class="image-watermark">
      <!-- 文件上传 -->
      <input 
        type="file" 
        multiple 
        accept="image/*" 
        @change="handleFileUpload" 
        :disabled="images.length >= 10"
      >
      
      <!-- Logo上传 -->
      <input 
        type="file" 
        accept="image/*" 
        @change="handleLogoUpload"
      >
  
      <!-- 图片预览区域 -->
      <div class="images-container">
        <div v-for="(image, index) in images" :key="index" class="image-item">
          <canvas :ref="'canvas' + index" class="preview-canvas"></canvas>
          
          <!-- 水印编辑区域 -->
          <div class="watermark-inputs">
            <input v-model="image.name" placeholder="姓名" @input="updateWatermark(index)">
            <input v-model="image.time" placeholder="时间" @input="updateWatermark(index)">
            <input v-model="image.location" placeholder="地点" @input="updateWatermark(index)">
            <input v-model="image.note" placeholder="备注" @input="updateWatermark(index)">
            <input v-model="image.extra" placeholder="其他" @input="updateWatermark(index)">
          </div>
          
          <button @click="downloadImage(index)">下载</button>
        </div>
      </div>
    </div>
  </template>
  
  <script>
  export default {
    name: 'ImageWatermark',
    data() {
      return {
        images: [], // 存储图片信息的数组
        logoImage: null, // 存储logo图片
      }
    },
    methods: {
      handleLogoUpload(event) {
        const file = event.target.files[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            const img = new Image();
            img.onload = () => {
              this.logoImage = img;
              // 重新渲染所有图片的水印
              this.images.forEach((_, index) => {
                this.updateWatermark(index);
              });
            };
            img.src = e.target.result;
          };
          reader.readAsDataURL(file);
        }
      },
  
      handleFileUpload(event) {
      // 修正：正确获取文件列表并转换为数组
      const files = Array.from(event.target.files);
      
      if (this.images.length + files.length > 10) {
        alert('最多只能上传10张图片！');
        return;
      }

      files.forEach(file => {
        const reader = new FileReader();
        reader.onload = (e) => {
          const img = new Image();
          img.onload = () => {
            this.images.push({
              original: img,
              name: '',
              time: new Date().toLocaleString(),
              location: '',
              note: '',
              extra: '',
            });
            this.$nextTick(() => {
              this.updateWatermark(this.images.length - 1);
            });
          };
          img.src = e.target.result;
        };
        reader.readAsDataURL(file);
      });
    },
    updateWatermark(index) {
      const canvas = this.$refs['canvas' + index][0];
      const ctx = canvas.getContext('2d');
      const image = this.images[index];
      const img = image.original;

      // 设置画布尺寸
      canvas.width = img.width;
      canvas.height = img.height + img.height * 0.1;

      // 清空画布
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // 绘制原始图片
      ctx.drawImage(img, 0, 0);

      // 绘制底部白色长方形
      const bottomRectHeight = img.height * 0.1;
      ctx.fillStyle = 'white';
      ctx.fillRect(0, img.height, canvas.width, bottomRectHeight);

      // logo 和姓名的位置计算
      const logoWidth = 200;
      const logoHeight = 80; // 只保留 logo 高度
      const nameHeight = 30; // 姓名文字区域高度
      const logoX = canvas.width - logoWidth - 20; // 距离右边 20px
      const logoY = img.height - bottomRectHeight - logoHeight - nameHeight - 5; // 距离底部白色区域 5px

      // 绘制Logo（如果已上传）
      if (this.logoImage) {
        ctx.drawImage(
          this.logoImage,
          logoX,
          logoY,
          logoWidth,
          logoHeight
        );
      }

      // 绘制姓名（白色字体，无背景）
      ctx.fillStyle = 'white';
      ctx.font = 'bold 16px Arial'; // 加粗使文字更清晰
      ctx.textAlign = 'center';
      // 添加文字描边使其在任何背景上都清晰可见
      ctx.strokeStyle = 'black';
      ctx.lineWidth = 3;
      ctx.strokeText(
        image.name || '姓名',
        logoX + logoWidth/2,
        logoY + logoHeight + 20 // 调整姓名位置在 logo 下方
      );
      ctx.fillText(
        image.name || '姓名',
        logoX + logoWidth/2,
        logoY + logoHeight + 20
      );

      // 绘制底部水印文字
      ctx.fillStyle = 'black';
      ctx.font = `${img.height * 0.03}px Arial`;
      const watermarkHeight = img.height + (bottomRectHeight * 0.5);
      const sectionWidth = canvas.width / 4;

      ctx.textAlign = 'center';
      ctx.fillText(image.time, sectionWidth * 0.5, watermarkHeight);
    //   ctx.fillText(image.location, sectionWidth * 1.5, watermarkHeight);
      ctx.fillText(image.location, sectionWidth * 0.5, watermarkHeight+40);
      ctx.fillText(image.note, sectionWidth * 2.5, watermarkHeight);
      ctx.fillText(image.extra, sectionWidth * 3.5, watermarkHeight);
    },
  
      downloadImage(index) {
        const canvas = this.$refs['canvas' + index][0];
        const link = document.createElement('a');
        link.download = `watermarked_image_${index}.png`;
        link.href = canvas.toDataURL('image/png', 1.0);
        link.click();
      }
    }
  }
  </script>
  
  <style scoped>
  .image-watermark {
    padding: 20px;
  }
  
  .images-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 20px;
    margin-top: 20px;
  }
  
  .image-item {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  
  .preview-canvas {
    max-width: 100%;
    height: auto;
  }
  
  .watermark-inputs {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 5px;
  }
  
  input {
    padding: 5px;
    border: 1px solid #ddd;
    border-radius: 4px;
  }
  
  button {
    padding: 8px;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }
  
  button:hover {
    background-color: #45a049;
  }
  </style>